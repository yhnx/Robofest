
MicroMouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017d8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080018e4  080018e4  000028e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001908  08001908  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001908  08001908  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001908  08001908  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001908  08001908  00002908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800190c  0800190c  0000290c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001910  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  0800191c  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  0800191c  000030c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000755b  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014aa  00000000  00000000  0000a590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000928  00000000  00000000  0000ba40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000714  00000000  00000000  0000c368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001b11  00000000  00000000  0000ca7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009b42  00000000  00000000  0000e58d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000878b2  00000000  00000000  000180cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009f981  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025b0  00000000  00000000  0009f9c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000a1f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080018cc 	.word	0x080018cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080018cc 	.word	0x080018cc

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fa64 	bl	800061c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f84c 	bl	80001f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f93e 	bl	80003d8 <MX_GPIO_Init>
  MX_TIM1_Init();
 800015c:	f000 f890 	bl	8000280 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000160:	f000 f8e6 	bl	8000330 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000164:	213c      	movs	r1, #60	@ 0x3c
 8000166:	481a      	ldr	r0, [pc, #104]	@ (80001d0 <main+0x84>)
 8000168:	f001 fa06 	bl	8001578 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800016c:	213c      	movs	r1, #60	@ 0x3c
 800016e:	4819      	ldr	r0, [pc, #100]	@ (80001d4 <main+0x88>)
 8000170:	f001 fa02 	bl	8001578 <HAL_TIM_Encoder_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    left_counts = (int16_t) TIM1->CNT;
 8000174:	4b18      	ldr	r3, [pc, #96]	@ (80001d8 <main+0x8c>)
 8000176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000178:	b21a      	sxth	r2, r3
 800017a:	4b18      	ldr	r3, [pc, #96]	@ (80001dc <main+0x90>)
 800017c:	801a      	strh	r2, [r3, #0]
    right_counts = (int16_t) TIM2->CNT;
 800017e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000184:	b21a      	sxth	r2, r3
 8000186:	4b16      	ldr	r3, [pc, #88]	@ (80001e0 <main+0x94>)
 8000188:	801a      	strh	r2, [r3, #0]

    // Check if counts have changed
    if (left_counts != prev_left_counts || right_counts != prev_right_counts) {
 800018a:	4b14      	ldr	r3, [pc, #80]	@ (80001dc <main+0x90>)
 800018c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000190:	4b14      	ldr	r3, [pc, #80]	@ (80001e4 <main+0x98>)
 8000192:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000196:	429a      	cmp	r2, r3
 8000198:	d107      	bne.n	80001aa <main+0x5e>
 800019a:	4b11      	ldr	r3, [pc, #68]	@ (80001e0 <main+0x94>)
 800019c:	f9b3 2000 	ldrsh.w	r2, [r3]
 80001a0:	4b11      	ldr	r3, [pc, #68]	@ (80001e8 <main+0x9c>)
 80001a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80001a6:	429a      	cmp	r2, r3
 80001a8:	d00d      	beq.n	80001c6 <main+0x7a>
      // Toggle the LED
      HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 80001aa:	2104      	movs	r1, #4
 80001ac:	480f      	ldr	r0, [pc, #60]	@ (80001ec <main+0xa0>)
 80001ae:	f000 fd23 	bl	8000bf8 <HAL_GPIO_TogglePin>

      // Update previous counts
      prev_left_counts = left_counts;
 80001b2:	4b0a      	ldr	r3, [pc, #40]	@ (80001dc <main+0x90>)
 80001b4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80001b8:	4b0a      	ldr	r3, [pc, #40]	@ (80001e4 <main+0x98>)
 80001ba:	801a      	strh	r2, [r3, #0]
      prev_right_counts = right_counts;
 80001bc:	4b08      	ldr	r3, [pc, #32]	@ (80001e0 <main+0x94>)
 80001be:	f9b3 2000 	ldrsh.w	r2, [r3]
 80001c2:	4b09      	ldr	r3, [pc, #36]	@ (80001e8 <main+0x9c>)
 80001c4:	801a      	strh	r2, [r3, #0]
    }

    // Optionally, add a delay to make the debug session more readable
    HAL_Delay(100);
 80001c6:	2064      	movs	r0, #100	@ 0x64
 80001c8:	f000 fa8a 	bl	80006e0 <HAL_Delay>
    left_counts = (int16_t) TIM1->CNT;
 80001cc:	e7d2      	b.n	8000174 <main+0x28>
 80001ce:	bf00      	nop
 80001d0:	20000028 	.word	0x20000028
 80001d4:	20000070 	.word	0x20000070
 80001d8:	40012c00 	.word	0x40012c00
 80001dc:	200000b8 	.word	0x200000b8
 80001e0:	200000ba 	.word	0x200000ba
 80001e4:	200000bc 	.word	0x200000bc
 80001e8:	200000be 	.word	0x200000be
 80001ec:	40010c00 	.word	0x40010c00

080001f0 <SystemClock_Config>:
/**
  *brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b090      	sub	sp, #64	@ 0x40
 80001f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f6:	f107 0318 	add.w	r3, r7, #24
 80001fa:	2228      	movs	r2, #40	@ 0x28
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f001 fb38 	bl	8001874 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000204:	1d3b      	adds	r3, r7, #4
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]
 800020a:	605a      	str	r2, [r3, #4]
 800020c:	609a      	str	r2, [r3, #8]
 800020e:	60da      	str	r2, [r3, #12]
 8000210:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000212:	2301      	movs	r3, #1
 8000214:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000216:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800021a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800021c:	2300      	movs	r3, #0
 800021e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000220:	2301      	movs	r3, #1
 8000222:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000224:	2302      	movs	r3, #2
 8000226:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000228:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800022c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800022e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000232:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000234:	f107 0318 	add.w	r3, r7, #24
 8000238:	4618      	mov	r0, r3
 800023a:	f000 fcf7 	bl	8000c2c <HAL_RCC_OscConfig>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d001      	beq.n	8000248 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000244:	f000 f918 	bl	8000478 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000248:	230f      	movs	r3, #15
 800024a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800024c:	2302      	movs	r3, #2
 800024e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000250:	2300      	movs	r3, #0
 8000252:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000254:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000258:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800025e:	1d3b      	adds	r3, r7, #4
 8000260:	2102      	movs	r1, #2
 8000262:	4618      	mov	r0, r3
 8000264:	f000 ff64 	bl	8001130 <HAL_RCC_ClockConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800026e:	f000 f903 	bl	8000478 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000272:	f001 f847 	bl	8001304 <HAL_RCC_EnableCSS>
}
 8000276:	bf00      	nop
 8000278:	3740      	adds	r7, #64	@ 0x40
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
	...

08000280 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08c      	sub	sp, #48	@ 0x30
 8000284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000286:	f107 030c 	add.w	r3, r7, #12
 800028a:	2224      	movs	r2, #36	@ 0x24
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f001 faf0 	bl	8001874 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000294:	1d3b      	adds	r3, r7, #4
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800029c:	4b22      	ldr	r3, [pc, #136]	@ (8000328 <MX_TIM1_Init+0xa8>)
 800029e:	4a23      	ldr	r2, [pc, #140]	@ (800032c <MX_TIM1_Init+0xac>)
 80002a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80002a2:	4b21      	ldr	r3, [pc, #132]	@ (8000328 <MX_TIM1_Init+0xa8>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000328 <MX_TIM1_Init+0xa8>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80002ae:	4b1e      	ldr	r3, [pc, #120]	@ (8000328 <MX_TIM1_Init+0xa8>)
 80002b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80002b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000328 <MX_TIM1_Init+0xa8>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80002bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000328 <MX_TIM1_Init+0xa8>)
 80002be:	2200      	movs	r2, #0
 80002c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002c2:	4b19      	ldr	r3, [pc, #100]	@ (8000328 <MX_TIM1_Init+0xa8>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80002c8:	2303      	movs	r3, #3
 80002ca:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80002cc:	2300      	movs	r3, #0
 80002ce:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80002d0:	2301      	movs	r3, #1
 80002d2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80002d4:	2300      	movs	r3, #0
 80002d6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80002d8:	2300      	movs	r3, #0
 80002da:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80002dc:	2300      	movs	r3, #0
 80002de:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80002e0:	2301      	movs	r3, #1
 80002e2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80002e4:	2300      	movs	r3, #0
 80002e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80002e8:	2300      	movs	r3, #0
 80002ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80002ec:	f107 030c 	add.w	r3, r7, #12
 80002f0:	4619      	mov	r1, r3
 80002f2:	480d      	ldr	r0, [pc, #52]	@ (8000328 <MX_TIM1_Init+0xa8>)
 80002f4:	f001 f89e 	bl	8001434 <HAL_TIM_Encoder_Init>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80002fe:	f000 f8bb 	bl	8000478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000302:	2300      	movs	r3, #0
 8000304:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000306:	2300      	movs	r3, #0
 8000308:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	4619      	mov	r1, r3
 800030e:	4806      	ldr	r0, [pc, #24]	@ (8000328 <MX_TIM1_Init+0xa8>)
 8000310:	f001 fa52 	bl	80017b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800031a:	f000 f8ad 	bl	8000478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800031e:	bf00      	nop
 8000320:	3730      	adds	r7, #48	@ 0x30
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	20000028 	.word	0x20000028
 800032c:	40012c00 	.word	0x40012c00

08000330 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b08c      	sub	sp, #48	@ 0x30
 8000334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {};
 8000336:	f107 030c 	add.w	r3, r7, #12
 800033a:	2224      	movs	r2, #36	@ 0x24
 800033c:	2100      	movs	r1, #0
 800033e:	4618      	mov	r0, r3
 8000340:	f001 fa98 	bl	8001874 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000344:	1d3b      	adds	r3, r7, #4
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
 800034a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800034c:	4b21      	ldr	r3, [pc, #132]	@ (80003d4 <MX_TIM2_Init+0xa4>)
 800034e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000352:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000354:	4b1f      	ldr	r3, [pc, #124]	@ (80003d4 <MX_TIM2_Init+0xa4>)
 8000356:	2200      	movs	r2, #0
 8000358:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800035a:	4b1e      	ldr	r3, [pc, #120]	@ (80003d4 <MX_TIM2_Init+0xa4>)
 800035c:	2200      	movs	r2, #0
 800035e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000360:	4b1c      	ldr	r3, [pc, #112]	@ (80003d4 <MX_TIM2_Init+0xa4>)
 8000362:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000366:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000368:	4b1a      	ldr	r3, [pc, #104]	@ (80003d4 <MX_TIM2_Init+0xa4>)
 800036a:	2200      	movs	r2, #0
 800036c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800036e:	4b19      	ldr	r3, [pc, #100]	@ (80003d4 <MX_TIM2_Init+0xa4>)
 8000370:	2200      	movs	r2, #0
 8000372:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000374:	2303      	movs	r3, #3
 8000376:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000378:	2300      	movs	r3, #0
 800037a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800037c:	2301      	movs	r3, #1
 800037e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000380:	2300      	movs	r3, #0
 8000382:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000384:	2300      	movs	r3, #0
 8000386:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000388:	2300      	movs	r3, #0
 800038a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800038c:	2301      	movs	r3, #1
 800038e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000390:	2300      	movs	r3, #0
 8000392:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000394:	2300      	movs	r3, #0
 8000396:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000398:	f107 030c 	add.w	r3, r7, #12
 800039c:	4619      	mov	r1, r3
 800039e:	480d      	ldr	r0, [pc, #52]	@ (80003d4 <MX_TIM2_Init+0xa4>)
 80003a0:	f001 f848 	bl	8001434 <HAL_TIM_Encoder_Init>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80003aa:	f000 f865 	bl	8000478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003ae:	2300      	movs	r3, #0
 80003b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003b2:	2300      	movs	r3, #0
 80003b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003b6:	1d3b      	adds	r3, r7, #4
 80003b8:	4619      	mov	r1, r3
 80003ba:	4806      	ldr	r0, [pc, #24]	@ (80003d4 <MX_TIM2_Init+0xa4>)
 80003bc:	f001 f9fc 	bl	80017b8 <HAL_TIMEx_MasterConfigSynchronization>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80003c6:	f000 f857 	bl	8000478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003ca:	bf00      	nop
 80003cc:	3730      	adds	r7, #48	@ 0x30
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	20000070 	.word	0x20000070

080003d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b088      	sub	sp, #32
 80003dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003de:	f107 0310 	add.w	r3, r7, #16
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	605a      	str	r2, [r3, #4]
 80003e8:	609a      	str	r2, [r3, #8]
 80003ea:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003ec:	4b1f      	ldr	r3, [pc, #124]	@ (800046c <MX_GPIO_Init+0x94>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a1e      	ldr	r2, [pc, #120]	@ (800046c <MX_GPIO_Init+0x94>)
 80003f2:	f043 0320 	orr.w	r3, r3, #32
 80003f6:	6193      	str	r3, [r2, #24]
 80003f8:	4b1c      	ldr	r3, [pc, #112]	@ (800046c <MX_GPIO_Init+0x94>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	f003 0320 	and.w	r3, r3, #32
 8000400:	60fb      	str	r3, [r7, #12]
 8000402:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000404:	4b19      	ldr	r3, [pc, #100]	@ (800046c <MX_GPIO_Init+0x94>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	4a18      	ldr	r2, [pc, #96]	@ (800046c <MX_GPIO_Init+0x94>)
 800040a:	f043 0304 	orr.w	r3, r3, #4
 800040e:	6193      	str	r3, [r2, #24]
 8000410:	4b16      	ldr	r3, [pc, #88]	@ (800046c <MX_GPIO_Init+0x94>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	f003 0304 	and.w	r3, r3, #4
 8000418:	60bb      	str	r3, [r7, #8]
 800041a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE(); // Enable GPIOB clock
 800041c:	4b13      	ldr	r3, [pc, #76]	@ (800046c <MX_GPIO_Init+0x94>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	4a12      	ldr	r2, [pc, #72]	@ (800046c <MX_GPIO_Init+0x94>)
 8000422:	f043 0308 	orr.w	r3, r3, #8
 8000426:	6193      	str	r3, [r2, #24]
 8000428:	4b10      	ldr	r3, [pc, #64]	@ (800046c <MX_GPIO_Init+0x94>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	f003 0308 	and.w	r3, r3, #8
 8000430:	607b      	str	r3, [r7, #4]
 8000432:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000434:	2303      	movs	r3, #3
 8000436:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000438:	2302      	movs	r3, #2
 800043a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800043c:	2302      	movs	r3, #2
 800043e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000440:	f107 0310 	add.w	r3, r7, #16
 8000444:	4619      	mov	r1, r3
 8000446:	480a      	ldr	r0, [pc, #40]	@ (8000470 <MX_GPIO_Init+0x98>)
 8000448:	f000 fa52 	bl	80008f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800044c:	2304      	movs	r3, #4
 800044e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000450:	2301      	movs	r3, #1
 8000452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000454:	2302      	movs	r3, #2
 8000456:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000458:	f107 0310 	add.w	r3, r7, #16
 800045c:	4619      	mov	r1, r3
 800045e:	4805      	ldr	r0, [pc, #20]	@ (8000474 <MX_GPIO_Init+0x9c>)
 8000460:	f000 fa46 	bl	80008f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000464:	bf00      	nop
 8000466:	3720      	adds	r7, #32
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	40021000 	.word	0x40021000
 8000470:	40010800 	.word	0x40010800
 8000474:	40010c00 	.word	0x40010c00

08000478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800047c:	b672      	cpsid	i
}
 800047e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000480:	bf00      	nop
 8000482:	e7fd      	b.n	8000480 <Error_Handler+0x8>

08000484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000484:	b480      	push	{r7}
 8000486:	b085      	sub	sp, #20
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800048a:	4b15      	ldr	r3, [pc, #84]	@ (80004e0 <HAL_MspInit+0x5c>)
 800048c:	699b      	ldr	r3, [r3, #24]
 800048e:	4a14      	ldr	r2, [pc, #80]	@ (80004e0 <HAL_MspInit+0x5c>)
 8000490:	f043 0301 	orr.w	r3, r3, #1
 8000494:	6193      	str	r3, [r2, #24]
 8000496:	4b12      	ldr	r3, [pc, #72]	@ (80004e0 <HAL_MspInit+0x5c>)
 8000498:	699b      	ldr	r3, [r3, #24]
 800049a:	f003 0301 	and.w	r3, r3, #1
 800049e:	60bb      	str	r3, [r7, #8]
 80004a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004a2:	4b0f      	ldr	r3, [pc, #60]	@ (80004e0 <HAL_MspInit+0x5c>)
 80004a4:	69db      	ldr	r3, [r3, #28]
 80004a6:	4a0e      	ldr	r2, [pc, #56]	@ (80004e0 <HAL_MspInit+0x5c>)
 80004a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004ac:	61d3      	str	r3, [r2, #28]
 80004ae:	4b0c      	ldr	r3, [pc, #48]	@ (80004e0 <HAL_MspInit+0x5c>)
 80004b0:	69db      	ldr	r3, [r3, #28]
 80004b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004ba:	4b0a      	ldr	r3, [pc, #40]	@ (80004e4 <HAL_MspInit+0x60>)
 80004bc:	685b      	ldr	r3, [r3, #4]
 80004be:	60fb      	str	r3, [r7, #12]
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004ce:	60fb      	str	r3, [r7, #12]
 80004d0:	4a04      	ldr	r2, [pc, #16]	@ (80004e4 <HAL_MspInit+0x60>)
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004d6:	bf00      	nop
 80004d8:	3714      	adds	r7, #20
 80004da:	46bd      	mov	sp, r7
 80004dc:	bc80      	pop	{r7}
 80004de:	4770      	bx	lr
 80004e0:	40021000 	.word	0x40021000
 80004e4:	40010000 	.word	0x40010000

080004e8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b088      	sub	sp, #32
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f0:	f107 0310 	add.w	r3, r7, #16
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4a16      	ldr	r2, [pc, #88]	@ (800055c <HAL_TIM_Encoder_MspInit+0x74>)
 8000504:	4293      	cmp	r3, r2
 8000506:	d124      	bne.n	8000552 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000508:	4b15      	ldr	r3, [pc, #84]	@ (8000560 <HAL_TIM_Encoder_MspInit+0x78>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	4a14      	ldr	r2, [pc, #80]	@ (8000560 <HAL_TIM_Encoder_MspInit+0x78>)
 800050e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000512:	6193      	str	r3, [r2, #24]
 8000514:	4b12      	ldr	r3, [pc, #72]	@ (8000560 <HAL_TIM_Encoder_MspInit+0x78>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800051c:	60fb      	str	r3, [r7, #12]
 800051e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000520:	4b0f      	ldr	r3, [pc, #60]	@ (8000560 <HAL_TIM_Encoder_MspInit+0x78>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	4a0e      	ldr	r2, [pc, #56]	@ (8000560 <HAL_TIM_Encoder_MspInit+0x78>)
 8000526:	f043 0304 	orr.w	r3, r3, #4
 800052a:	6193      	str	r3, [r2, #24]
 800052c:	4b0c      	ldr	r3, [pc, #48]	@ (8000560 <HAL_TIM_Encoder_MspInit+0x78>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	f003 0304 	and.w	r3, r3, #4
 8000534:	60bb      	str	r3, [r7, #8]
 8000536:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000538:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800053c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800053e:	2300      	movs	r3, #0
 8000540:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000542:	2300      	movs	r3, #0
 8000544:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000546:	f107 0310 	add.w	r3, r7, #16
 800054a:	4619      	mov	r1, r3
 800054c:	4805      	ldr	r0, [pc, #20]	@ (8000564 <HAL_TIM_Encoder_MspInit+0x7c>)
 800054e:	f000 f9cf 	bl	80008f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000552:	bf00      	nop
 8000554:	3720      	adds	r7, #32
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40012c00 	.word	0x40012c00
 8000560:	40021000 	.word	0x40021000
 8000564:	40010800 	.word	0x40010800

08000568 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800056c:	f000 ff2a 	bl	80013c4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000570:	bf00      	nop
 8000572:	e7fd      	b.n	8000570 <NMI_Handler+0x8>

08000574 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000578:	bf00      	nop
 800057a:	e7fd      	b.n	8000578 <HardFault_Handler+0x4>

0800057c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000580:	bf00      	nop
 8000582:	e7fd      	b.n	8000580 <MemManage_Handler+0x4>

08000584 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000588:	bf00      	nop
 800058a:	e7fd      	b.n	8000588 <BusFault_Handler+0x4>

0800058c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000590:	bf00      	nop
 8000592:	e7fd      	b.n	8000590 <UsageFault_Handler+0x4>

08000594 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr

080005a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr

080005ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr

080005b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005bc:	f000 f874 	bl	80006a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr

080005d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005d0:	f7ff fff8 	bl	80005c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005d4:	480b      	ldr	r0, [pc, #44]	@ (8000604 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005d6:	490c      	ldr	r1, [pc, #48]	@ (8000608 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005d8:	4a0c      	ldr	r2, [pc, #48]	@ (800060c <LoopFillZerobss+0x16>)
  movs r3, #0
 80005da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005dc:	e002      	b.n	80005e4 <LoopCopyDataInit>

080005de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005e2:	3304      	adds	r3, #4

080005e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005e8:	d3f9      	bcc.n	80005de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ea:	4a09      	ldr	r2, [pc, #36]	@ (8000610 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005ec:	4c09      	ldr	r4, [pc, #36]	@ (8000614 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005f0:	e001      	b.n	80005f6 <LoopFillZerobss>

080005f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005f4:	3204      	adds	r2, #4

080005f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005f8:	d3fb      	bcc.n	80005f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005fa:	f001 f943 	bl	8001884 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005fe:	f7ff fda5 	bl	800014c <main>
  bx lr
 8000602:	4770      	bx	lr
  ldr r0, =_sdata
 8000604:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000608:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800060c:	08001910 	.word	0x08001910
  ldr r2, =_sbss
 8000610:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000614:	200000c4 	.word	0x200000c4

08000618 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000618:	e7fe      	b.n	8000618 <ADC1_2_IRQHandler>
	...

0800061c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000620:	4b08      	ldr	r3, [pc, #32]	@ (8000644 <HAL_Init+0x28>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a07      	ldr	r2, [pc, #28]	@ (8000644 <HAL_Init+0x28>)
 8000626:	f043 0310 	orr.w	r3, r3, #16
 800062a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800062c:	2003      	movs	r0, #3
 800062e:	f000 f92b 	bl	8000888 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000632:	200f      	movs	r0, #15
 8000634:	f000 f808 	bl	8000648 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000638:	f7ff ff24 	bl	8000484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800063c:	2300      	movs	r3, #0
}
 800063e:	4618      	mov	r0, r3
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40022000 	.word	0x40022000

08000648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000650:	4b12      	ldr	r3, [pc, #72]	@ (800069c <HAL_InitTick+0x54>)
 8000652:	681a      	ldr	r2, [r3, #0]
 8000654:	4b12      	ldr	r3, [pc, #72]	@ (80006a0 <HAL_InitTick+0x58>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	4619      	mov	r1, r3
 800065a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800065e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000662:	fbb2 f3f3 	udiv	r3, r2, r3
 8000666:	4618      	mov	r0, r3
 8000668:	f000 f935 	bl	80008d6 <HAL_SYSTICK_Config>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000672:	2301      	movs	r3, #1
 8000674:	e00e      	b.n	8000694 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2b0f      	cmp	r3, #15
 800067a:	d80a      	bhi.n	8000692 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800067c:	2200      	movs	r2, #0
 800067e:	6879      	ldr	r1, [r7, #4]
 8000680:	f04f 30ff 	mov.w	r0, #4294967295
 8000684:	f000 f90b 	bl	800089e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000688:	4a06      	ldr	r2, [pc, #24]	@ (80006a4 <HAL_InitTick+0x5c>)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800068e:	2300      	movs	r3, #0
 8000690:	e000      	b.n	8000694 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000692:	2301      	movs	r3, #1
}
 8000694:	4618      	mov	r0, r3
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000000 	.word	0x20000000
 80006a0:	20000008 	.word	0x20000008
 80006a4:	20000004 	.word	0x20000004

080006a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006ac:	4b05      	ldr	r3, [pc, #20]	@ (80006c4 <HAL_IncTick+0x1c>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	461a      	mov	r2, r3
 80006b2:	4b05      	ldr	r3, [pc, #20]	@ (80006c8 <HAL_IncTick+0x20>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4413      	add	r3, r2
 80006b8:	4a03      	ldr	r2, [pc, #12]	@ (80006c8 <HAL_IncTick+0x20>)
 80006ba:	6013      	str	r3, [r2, #0]
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr
 80006c4:	20000008 	.word	0x20000008
 80006c8:	200000c0 	.word	0x200000c0

080006cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  return uwTick;
 80006d0:	4b02      	ldr	r3, [pc, #8]	@ (80006dc <HAL_GetTick+0x10>)
 80006d2:	681b      	ldr	r3, [r3, #0]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr
 80006dc:	200000c0 	.word	0x200000c0

080006e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006e8:	f7ff fff0 	bl	80006cc <HAL_GetTick>
 80006ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006f8:	d005      	beq.n	8000706 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000724 <HAL_Delay+0x44>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	461a      	mov	r2, r3
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	4413      	add	r3, r2
 8000704:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000706:	bf00      	nop
 8000708:	f7ff ffe0 	bl	80006cc <HAL_GetTick>
 800070c:	4602      	mov	r2, r0
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	1ad3      	subs	r3, r2, r3
 8000712:	68fa      	ldr	r2, [r7, #12]
 8000714:	429a      	cmp	r2, r3
 8000716:	d8f7      	bhi.n	8000708 <HAL_Delay+0x28>
  {
  }
}
 8000718:	bf00      	nop
 800071a:	bf00      	nop
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000008 	.word	0x20000008

08000728 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	f003 0307 	and.w	r3, r3, #7
 8000736:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000738:	4b0c      	ldr	r3, [pc, #48]	@ (800076c <__NVIC_SetPriorityGrouping+0x44>)
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800073e:	68ba      	ldr	r2, [r7, #8]
 8000740:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000744:	4013      	ands	r3, r2
 8000746:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000750:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000754:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000758:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800075a:	4a04      	ldr	r2, [pc, #16]	@ (800076c <__NVIC_SetPriorityGrouping+0x44>)
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	60d3      	str	r3, [r2, #12]
}
 8000760:	bf00      	nop
 8000762:	3714      	adds	r7, #20
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	e000ed00 	.word	0xe000ed00

08000770 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000774:	4b04      	ldr	r3, [pc, #16]	@ (8000788 <__NVIC_GetPriorityGrouping+0x18>)
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	0a1b      	lsrs	r3, r3, #8
 800077a:	f003 0307 	and.w	r3, r3, #7
}
 800077e:	4618      	mov	r0, r3
 8000780:	46bd      	mov	sp, r7
 8000782:	bc80      	pop	{r7}
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	e000ed00 	.word	0xe000ed00

0800078c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	6039      	str	r1, [r7, #0]
 8000796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079c:	2b00      	cmp	r3, #0
 800079e:	db0a      	blt.n	80007b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	b2da      	uxtb	r2, r3
 80007a4:	490c      	ldr	r1, [pc, #48]	@ (80007d8 <__NVIC_SetPriority+0x4c>)
 80007a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007aa:	0112      	lsls	r2, r2, #4
 80007ac:	b2d2      	uxtb	r2, r2
 80007ae:	440b      	add	r3, r1
 80007b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007b4:	e00a      	b.n	80007cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	4908      	ldr	r1, [pc, #32]	@ (80007dc <__NVIC_SetPriority+0x50>)
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	f003 030f 	and.w	r3, r3, #15
 80007c2:	3b04      	subs	r3, #4
 80007c4:	0112      	lsls	r2, r2, #4
 80007c6:	b2d2      	uxtb	r2, r2
 80007c8:	440b      	add	r3, r1
 80007ca:	761a      	strb	r2, [r3, #24]
}
 80007cc:	bf00      	nop
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bc80      	pop	{r7}
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	e000e100 	.word	0xe000e100
 80007dc:	e000ed00 	.word	0xe000ed00

080007e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b089      	sub	sp, #36	@ 0x24
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	60f8      	str	r0, [r7, #12]
 80007e8:	60b9      	str	r1, [r7, #8]
 80007ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	f003 0307 	and.w	r3, r3, #7
 80007f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007f4:	69fb      	ldr	r3, [r7, #28]
 80007f6:	f1c3 0307 	rsb	r3, r3, #7
 80007fa:	2b04      	cmp	r3, #4
 80007fc:	bf28      	it	cs
 80007fe:	2304      	movcs	r3, #4
 8000800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000802:	69fb      	ldr	r3, [r7, #28]
 8000804:	3304      	adds	r3, #4
 8000806:	2b06      	cmp	r3, #6
 8000808:	d902      	bls.n	8000810 <NVIC_EncodePriority+0x30>
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	3b03      	subs	r3, #3
 800080e:	e000      	b.n	8000812 <NVIC_EncodePriority+0x32>
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000814:	f04f 32ff 	mov.w	r2, #4294967295
 8000818:	69bb      	ldr	r3, [r7, #24]
 800081a:	fa02 f303 	lsl.w	r3, r2, r3
 800081e:	43da      	mvns	r2, r3
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	401a      	ands	r2, r3
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000828:	f04f 31ff 	mov.w	r1, #4294967295
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	fa01 f303 	lsl.w	r3, r1, r3
 8000832:	43d9      	mvns	r1, r3
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000838:	4313      	orrs	r3, r2
         );
}
 800083a:	4618      	mov	r0, r3
 800083c:	3724      	adds	r7, #36	@ 0x24
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr

08000844 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	3b01      	subs	r3, #1
 8000850:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000854:	d301      	bcc.n	800085a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000856:	2301      	movs	r3, #1
 8000858:	e00f      	b.n	800087a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800085a:	4a0a      	ldr	r2, [pc, #40]	@ (8000884 <SysTick_Config+0x40>)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	3b01      	subs	r3, #1
 8000860:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000862:	210f      	movs	r1, #15
 8000864:	f04f 30ff 	mov.w	r0, #4294967295
 8000868:	f7ff ff90 	bl	800078c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800086c:	4b05      	ldr	r3, [pc, #20]	@ (8000884 <SysTick_Config+0x40>)
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000872:	4b04      	ldr	r3, [pc, #16]	@ (8000884 <SysTick_Config+0x40>)
 8000874:	2207      	movs	r2, #7
 8000876:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000878:	2300      	movs	r3, #0
}
 800087a:	4618      	mov	r0, r3
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	e000e010 	.word	0xe000e010

08000888 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f7ff ff49 	bl	8000728 <__NVIC_SetPriorityGrouping>
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800089e:	b580      	push	{r7, lr}
 80008a0:	b086      	sub	sp, #24
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	4603      	mov	r3, r0
 80008a6:	60b9      	str	r1, [r7, #8]
 80008a8:	607a      	str	r2, [r7, #4]
 80008aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008b0:	f7ff ff5e 	bl	8000770 <__NVIC_GetPriorityGrouping>
 80008b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008b6:	687a      	ldr	r2, [r7, #4]
 80008b8:	68b9      	ldr	r1, [r7, #8]
 80008ba:	6978      	ldr	r0, [r7, #20]
 80008bc:	f7ff ff90 	bl	80007e0 <NVIC_EncodePriority>
 80008c0:	4602      	mov	r2, r0
 80008c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008c6:	4611      	mov	r1, r2
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff ff5f 	bl	800078c <__NVIC_SetPriority>
}
 80008ce:	bf00      	nop
 80008d0:	3718      	adds	r7, #24
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b082      	sub	sp, #8
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f7ff ffb0 	bl	8000844 <SysTick_Config>
 80008e4:	4603      	mov	r3, r0
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
	...

080008f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b08b      	sub	sp, #44	@ 0x2c
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008fe:	2300      	movs	r3, #0
 8000900:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000902:	e169      	b.n	8000bd8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000904:	2201      	movs	r2, #1
 8000906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	69fa      	ldr	r2, [r7, #28]
 8000914:	4013      	ands	r3, r2
 8000916:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000918:	69ba      	ldr	r2, [r7, #24]
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	429a      	cmp	r2, r3
 800091e:	f040 8158 	bne.w	8000bd2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	4a9a      	ldr	r2, [pc, #616]	@ (8000b90 <HAL_GPIO_Init+0x2a0>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d05e      	beq.n	80009ea <HAL_GPIO_Init+0xfa>
 800092c:	4a98      	ldr	r2, [pc, #608]	@ (8000b90 <HAL_GPIO_Init+0x2a0>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d875      	bhi.n	8000a1e <HAL_GPIO_Init+0x12e>
 8000932:	4a98      	ldr	r2, [pc, #608]	@ (8000b94 <HAL_GPIO_Init+0x2a4>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d058      	beq.n	80009ea <HAL_GPIO_Init+0xfa>
 8000938:	4a96      	ldr	r2, [pc, #600]	@ (8000b94 <HAL_GPIO_Init+0x2a4>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d86f      	bhi.n	8000a1e <HAL_GPIO_Init+0x12e>
 800093e:	4a96      	ldr	r2, [pc, #600]	@ (8000b98 <HAL_GPIO_Init+0x2a8>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d052      	beq.n	80009ea <HAL_GPIO_Init+0xfa>
 8000944:	4a94      	ldr	r2, [pc, #592]	@ (8000b98 <HAL_GPIO_Init+0x2a8>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d869      	bhi.n	8000a1e <HAL_GPIO_Init+0x12e>
 800094a:	4a94      	ldr	r2, [pc, #592]	@ (8000b9c <HAL_GPIO_Init+0x2ac>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d04c      	beq.n	80009ea <HAL_GPIO_Init+0xfa>
 8000950:	4a92      	ldr	r2, [pc, #584]	@ (8000b9c <HAL_GPIO_Init+0x2ac>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d863      	bhi.n	8000a1e <HAL_GPIO_Init+0x12e>
 8000956:	4a92      	ldr	r2, [pc, #584]	@ (8000ba0 <HAL_GPIO_Init+0x2b0>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d046      	beq.n	80009ea <HAL_GPIO_Init+0xfa>
 800095c:	4a90      	ldr	r2, [pc, #576]	@ (8000ba0 <HAL_GPIO_Init+0x2b0>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d85d      	bhi.n	8000a1e <HAL_GPIO_Init+0x12e>
 8000962:	2b12      	cmp	r3, #18
 8000964:	d82a      	bhi.n	80009bc <HAL_GPIO_Init+0xcc>
 8000966:	2b12      	cmp	r3, #18
 8000968:	d859      	bhi.n	8000a1e <HAL_GPIO_Init+0x12e>
 800096a:	a201      	add	r2, pc, #4	@ (adr r2, 8000970 <HAL_GPIO_Init+0x80>)
 800096c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000970:	080009eb 	.word	0x080009eb
 8000974:	080009c5 	.word	0x080009c5
 8000978:	080009d7 	.word	0x080009d7
 800097c:	08000a19 	.word	0x08000a19
 8000980:	08000a1f 	.word	0x08000a1f
 8000984:	08000a1f 	.word	0x08000a1f
 8000988:	08000a1f 	.word	0x08000a1f
 800098c:	08000a1f 	.word	0x08000a1f
 8000990:	08000a1f 	.word	0x08000a1f
 8000994:	08000a1f 	.word	0x08000a1f
 8000998:	08000a1f 	.word	0x08000a1f
 800099c:	08000a1f 	.word	0x08000a1f
 80009a0:	08000a1f 	.word	0x08000a1f
 80009a4:	08000a1f 	.word	0x08000a1f
 80009a8:	08000a1f 	.word	0x08000a1f
 80009ac:	08000a1f 	.word	0x08000a1f
 80009b0:	08000a1f 	.word	0x08000a1f
 80009b4:	080009cd 	.word	0x080009cd
 80009b8:	080009e1 	.word	0x080009e1
 80009bc:	4a79      	ldr	r2, [pc, #484]	@ (8000ba4 <HAL_GPIO_Init+0x2b4>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d013      	beq.n	80009ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009c2:	e02c      	b.n	8000a1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	623b      	str	r3, [r7, #32]
          break;
 80009ca:	e029      	b.n	8000a20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	3304      	adds	r3, #4
 80009d2:	623b      	str	r3, [r7, #32]
          break;
 80009d4:	e024      	b.n	8000a20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	68db      	ldr	r3, [r3, #12]
 80009da:	3308      	adds	r3, #8
 80009dc:	623b      	str	r3, [r7, #32]
          break;
 80009de:	e01f      	b.n	8000a20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	330c      	adds	r3, #12
 80009e6:	623b      	str	r3, [r7, #32]
          break;
 80009e8:	e01a      	b.n	8000a20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	689b      	ldr	r3, [r3, #8]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d102      	bne.n	80009f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009f2:	2304      	movs	r3, #4
 80009f4:	623b      	str	r3, [r7, #32]
          break;
 80009f6:	e013      	b.n	8000a20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	689b      	ldr	r3, [r3, #8]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d105      	bne.n	8000a0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a00:	2308      	movs	r3, #8
 8000a02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	69fa      	ldr	r2, [r7, #28]
 8000a08:	611a      	str	r2, [r3, #16]
          break;
 8000a0a:	e009      	b.n	8000a20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a0c:	2308      	movs	r3, #8
 8000a0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	69fa      	ldr	r2, [r7, #28]
 8000a14:	615a      	str	r2, [r3, #20]
          break;
 8000a16:	e003      	b.n	8000a20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	623b      	str	r3, [r7, #32]
          break;
 8000a1c:	e000      	b.n	8000a20 <HAL_GPIO_Init+0x130>
          break;
 8000a1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a20:	69bb      	ldr	r3, [r7, #24]
 8000a22:	2bff      	cmp	r3, #255	@ 0xff
 8000a24:	d801      	bhi.n	8000a2a <HAL_GPIO_Init+0x13a>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	e001      	b.n	8000a2e <HAL_GPIO_Init+0x13e>
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	3304      	adds	r3, #4
 8000a2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a30:	69bb      	ldr	r3, [r7, #24]
 8000a32:	2bff      	cmp	r3, #255	@ 0xff
 8000a34:	d802      	bhi.n	8000a3c <HAL_GPIO_Init+0x14c>
 8000a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	e002      	b.n	8000a42 <HAL_GPIO_Init+0x152>
 8000a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a3e:	3b08      	subs	r3, #8
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	210f      	movs	r1, #15
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a50:	43db      	mvns	r3, r3
 8000a52:	401a      	ands	r2, r3
 8000a54:	6a39      	ldr	r1, [r7, #32]
 8000a56:	693b      	ldr	r3, [r7, #16]
 8000a58:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5c:	431a      	orrs	r2, r3
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	f000 80b1 	beq.w	8000bd2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a70:	4b4d      	ldr	r3, [pc, #308]	@ (8000ba8 <HAL_GPIO_Init+0x2b8>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	4a4c      	ldr	r2, [pc, #304]	@ (8000ba8 <HAL_GPIO_Init+0x2b8>)
 8000a76:	f043 0301 	orr.w	r3, r3, #1
 8000a7a:	6193      	str	r3, [r2, #24]
 8000a7c:	4b4a      	ldr	r3, [pc, #296]	@ (8000ba8 <HAL_GPIO_Init+0x2b8>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	f003 0301 	and.w	r3, r3, #1
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a88:	4a48      	ldr	r2, [pc, #288]	@ (8000bac <HAL_GPIO_Init+0x2bc>)
 8000a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a8c:	089b      	lsrs	r3, r3, #2
 8000a8e:	3302      	adds	r3, #2
 8000a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a98:	f003 0303 	and.w	r3, r3, #3
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	220f      	movs	r2, #15
 8000aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	68fa      	ldr	r2, [r7, #12]
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4a40      	ldr	r2, [pc, #256]	@ (8000bb0 <HAL_GPIO_Init+0x2c0>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d013      	beq.n	8000adc <HAL_GPIO_Init+0x1ec>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	4a3f      	ldr	r2, [pc, #252]	@ (8000bb4 <HAL_GPIO_Init+0x2c4>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d00d      	beq.n	8000ad8 <HAL_GPIO_Init+0x1e8>
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4a3e      	ldr	r2, [pc, #248]	@ (8000bb8 <HAL_GPIO_Init+0x2c8>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d007      	beq.n	8000ad4 <HAL_GPIO_Init+0x1e4>
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4a3d      	ldr	r2, [pc, #244]	@ (8000bbc <HAL_GPIO_Init+0x2cc>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d101      	bne.n	8000ad0 <HAL_GPIO_Init+0x1e0>
 8000acc:	2303      	movs	r3, #3
 8000ace:	e006      	b.n	8000ade <HAL_GPIO_Init+0x1ee>
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	e004      	b.n	8000ade <HAL_GPIO_Init+0x1ee>
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	e002      	b.n	8000ade <HAL_GPIO_Init+0x1ee>
 8000ad8:	2301      	movs	r3, #1
 8000ada:	e000      	b.n	8000ade <HAL_GPIO_Init+0x1ee>
 8000adc:	2300      	movs	r3, #0
 8000ade:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ae0:	f002 0203 	and.w	r2, r2, #3
 8000ae4:	0092      	lsls	r2, r2, #2
 8000ae6:	4093      	lsls	r3, r2
 8000ae8:	68fa      	ldr	r2, [r7, #12]
 8000aea:	4313      	orrs	r3, r2
 8000aec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000aee:	492f      	ldr	r1, [pc, #188]	@ (8000bac <HAL_GPIO_Init+0x2bc>)
 8000af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000af2:	089b      	lsrs	r3, r3, #2
 8000af4:	3302      	adds	r3, #2
 8000af6:	68fa      	ldr	r2, [r7, #12]
 8000af8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d006      	beq.n	8000b16 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b08:	4b2d      	ldr	r3, [pc, #180]	@ (8000bc0 <HAL_GPIO_Init+0x2d0>)
 8000b0a:	689a      	ldr	r2, [r3, #8]
 8000b0c:	492c      	ldr	r1, [pc, #176]	@ (8000bc0 <HAL_GPIO_Init+0x2d0>)
 8000b0e:	69bb      	ldr	r3, [r7, #24]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	608b      	str	r3, [r1, #8]
 8000b14:	e006      	b.n	8000b24 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b16:	4b2a      	ldr	r3, [pc, #168]	@ (8000bc0 <HAL_GPIO_Init+0x2d0>)
 8000b18:	689a      	ldr	r2, [r3, #8]
 8000b1a:	69bb      	ldr	r3, [r7, #24]
 8000b1c:	43db      	mvns	r3, r3
 8000b1e:	4928      	ldr	r1, [pc, #160]	@ (8000bc0 <HAL_GPIO_Init+0x2d0>)
 8000b20:	4013      	ands	r3, r2
 8000b22:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d006      	beq.n	8000b3e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b30:	4b23      	ldr	r3, [pc, #140]	@ (8000bc0 <HAL_GPIO_Init+0x2d0>)
 8000b32:	68da      	ldr	r2, [r3, #12]
 8000b34:	4922      	ldr	r1, [pc, #136]	@ (8000bc0 <HAL_GPIO_Init+0x2d0>)
 8000b36:	69bb      	ldr	r3, [r7, #24]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	60cb      	str	r3, [r1, #12]
 8000b3c:	e006      	b.n	8000b4c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b3e:	4b20      	ldr	r3, [pc, #128]	@ (8000bc0 <HAL_GPIO_Init+0x2d0>)
 8000b40:	68da      	ldr	r2, [r3, #12]
 8000b42:	69bb      	ldr	r3, [r7, #24]
 8000b44:	43db      	mvns	r3, r3
 8000b46:	491e      	ldr	r1, [pc, #120]	@ (8000bc0 <HAL_GPIO_Init+0x2d0>)
 8000b48:	4013      	ands	r3, r2
 8000b4a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d006      	beq.n	8000b66 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b58:	4b19      	ldr	r3, [pc, #100]	@ (8000bc0 <HAL_GPIO_Init+0x2d0>)
 8000b5a:	685a      	ldr	r2, [r3, #4]
 8000b5c:	4918      	ldr	r1, [pc, #96]	@ (8000bc0 <HAL_GPIO_Init+0x2d0>)
 8000b5e:	69bb      	ldr	r3, [r7, #24]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	604b      	str	r3, [r1, #4]
 8000b64:	e006      	b.n	8000b74 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b66:	4b16      	ldr	r3, [pc, #88]	@ (8000bc0 <HAL_GPIO_Init+0x2d0>)
 8000b68:	685a      	ldr	r2, [r3, #4]
 8000b6a:	69bb      	ldr	r3, [r7, #24]
 8000b6c:	43db      	mvns	r3, r3
 8000b6e:	4914      	ldr	r1, [pc, #80]	@ (8000bc0 <HAL_GPIO_Init+0x2d0>)
 8000b70:	4013      	ands	r3, r2
 8000b72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d021      	beq.n	8000bc4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b80:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc0 <HAL_GPIO_Init+0x2d0>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	490e      	ldr	r1, [pc, #56]	@ (8000bc0 <HAL_GPIO_Init+0x2d0>)
 8000b86:	69bb      	ldr	r3, [r7, #24]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	600b      	str	r3, [r1, #0]
 8000b8c:	e021      	b.n	8000bd2 <HAL_GPIO_Init+0x2e2>
 8000b8e:	bf00      	nop
 8000b90:	10320000 	.word	0x10320000
 8000b94:	10310000 	.word	0x10310000
 8000b98:	10220000 	.word	0x10220000
 8000b9c:	10210000 	.word	0x10210000
 8000ba0:	10120000 	.word	0x10120000
 8000ba4:	10110000 	.word	0x10110000
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	40010000 	.word	0x40010000
 8000bb0:	40010800 	.word	0x40010800
 8000bb4:	40010c00 	.word	0x40010c00
 8000bb8:	40011000 	.word	0x40011000
 8000bbc:	40011400 	.word	0x40011400
 8000bc0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf4 <HAL_GPIO_Init+0x304>)
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	43db      	mvns	r3, r3
 8000bcc:	4909      	ldr	r1, [pc, #36]	@ (8000bf4 <HAL_GPIO_Init+0x304>)
 8000bce:	4013      	ands	r3, r2
 8000bd0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bde:	fa22 f303 	lsr.w	r3, r2, r3
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f47f ae8e 	bne.w	8000904 <HAL_GPIO_Init+0x14>
  }
}
 8000be8:	bf00      	nop
 8000bea:	bf00      	nop
 8000bec:	372c      	adds	r7, #44	@ 0x2c
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr
 8000bf4:	40010400 	.word	0x40010400

08000bf8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	460b      	mov	r3, r1
 8000c02:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c0a:	887a      	ldrh	r2, [r7, #2]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	041a      	lsls	r2, r3, #16
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	43d9      	mvns	r1, r3
 8000c16:	887b      	ldrh	r3, [r7, #2]
 8000c18:	400b      	ands	r3, r1
 8000c1a:	431a      	orrs	r2, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	611a      	str	r2, [r3, #16]
}
 8000c20:	bf00      	nop
 8000c22:	3714      	adds	r7, #20
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr
	...

08000c2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d101      	bne.n	8000c3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e272      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	f000 8087 	beq.w	8000d5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c4c:	4b92      	ldr	r3, [pc, #584]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f003 030c 	and.w	r3, r3, #12
 8000c54:	2b04      	cmp	r3, #4
 8000c56:	d00c      	beq.n	8000c72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c58:	4b8f      	ldr	r3, [pc, #572]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f003 030c 	and.w	r3, r3, #12
 8000c60:	2b08      	cmp	r3, #8
 8000c62:	d112      	bne.n	8000c8a <HAL_RCC_OscConfig+0x5e>
 8000c64:	4b8c      	ldr	r3, [pc, #560]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c70:	d10b      	bne.n	8000c8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c72:	4b89      	ldr	r3, [pc, #548]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d06c      	beq.n	8000d58 <HAL_RCC_OscConfig+0x12c>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d168      	bne.n	8000d58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	e24c      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c92:	d106      	bne.n	8000ca2 <HAL_RCC_OscConfig+0x76>
 8000c94:	4b80      	ldr	r3, [pc, #512]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a7f      	ldr	r2, [pc, #508]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000c9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c9e:	6013      	str	r3, [r2, #0]
 8000ca0:	e02e      	b.n	8000d00 <HAL_RCC_OscConfig+0xd4>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d10c      	bne.n	8000cc4 <HAL_RCC_OscConfig+0x98>
 8000caa:	4b7b      	ldr	r3, [pc, #492]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a7a      	ldr	r2, [pc, #488]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000cb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000cb4:	6013      	str	r3, [r2, #0]
 8000cb6:	4b78      	ldr	r3, [pc, #480]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a77      	ldr	r2, [pc, #476]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000cbc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cc0:	6013      	str	r3, [r2, #0]
 8000cc2:	e01d      	b.n	8000d00 <HAL_RCC_OscConfig+0xd4>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ccc:	d10c      	bne.n	8000ce8 <HAL_RCC_OscConfig+0xbc>
 8000cce:	4b72      	ldr	r3, [pc, #456]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a71      	ldr	r2, [pc, #452]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000cd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cd8:	6013      	str	r3, [r2, #0]
 8000cda:	4b6f      	ldr	r3, [pc, #444]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a6e      	ldr	r2, [pc, #440]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000ce0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ce4:	6013      	str	r3, [r2, #0]
 8000ce6:	e00b      	b.n	8000d00 <HAL_RCC_OscConfig+0xd4>
 8000ce8:	4b6b      	ldr	r3, [pc, #428]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a6a      	ldr	r2, [pc, #424]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000cee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000cf2:	6013      	str	r3, [r2, #0]
 8000cf4:	4b68      	ldr	r3, [pc, #416]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a67      	ldr	r2, [pc, #412]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000cfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cfe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d013      	beq.n	8000d30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d08:	f7ff fce0 	bl	80006cc <HAL_GetTick>
 8000d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d0e:	e008      	b.n	8000d22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d10:	f7ff fcdc 	bl	80006cc <HAL_GetTick>
 8000d14:	4602      	mov	r2, r0
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	2b64      	cmp	r3, #100	@ 0x64
 8000d1c:	d901      	bls.n	8000d22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	e200      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d22:	4b5d      	ldr	r3, [pc, #372]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d0f0      	beq.n	8000d10 <HAL_RCC_OscConfig+0xe4>
 8000d2e:	e014      	b.n	8000d5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d30:	f7ff fccc 	bl	80006cc <HAL_GetTick>
 8000d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d36:	e008      	b.n	8000d4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d38:	f7ff fcc8 	bl	80006cc <HAL_GetTick>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	2b64      	cmp	r3, #100	@ 0x64
 8000d44:	d901      	bls.n	8000d4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d46:	2303      	movs	r3, #3
 8000d48:	e1ec      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d4a:	4b53      	ldr	r3, [pc, #332]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d1f0      	bne.n	8000d38 <HAL_RCC_OscConfig+0x10c>
 8000d56:	e000      	b.n	8000d5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d063      	beq.n	8000e2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d66:	4b4c      	ldr	r3, [pc, #304]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f003 030c 	and.w	r3, r3, #12
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d00b      	beq.n	8000d8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d72:	4b49      	ldr	r3, [pc, #292]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f003 030c 	and.w	r3, r3, #12
 8000d7a:	2b08      	cmp	r3, #8
 8000d7c:	d11c      	bne.n	8000db8 <HAL_RCC_OscConfig+0x18c>
 8000d7e:	4b46      	ldr	r3, [pc, #280]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d116      	bne.n	8000db8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d8a:	4b43      	ldr	r3, [pc, #268]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d005      	beq.n	8000da2 <HAL_RCC_OscConfig+0x176>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	691b      	ldr	r3, [r3, #16]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d001      	beq.n	8000da2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e1c0      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000da2:	4b3d      	ldr	r3, [pc, #244]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	695b      	ldr	r3, [r3, #20]
 8000dae:	00db      	lsls	r3, r3, #3
 8000db0:	4939      	ldr	r1, [pc, #228]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000db2:	4313      	orrs	r3, r2
 8000db4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000db6:	e03a      	b.n	8000e2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	691b      	ldr	r3, [r3, #16]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d020      	beq.n	8000e02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dc0:	4b36      	ldr	r3, [pc, #216]	@ (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dc6:	f7ff fc81 	bl	80006cc <HAL_GetTick>
 8000dca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dcc:	e008      	b.n	8000de0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dce:	f7ff fc7d 	bl	80006cc <HAL_GetTick>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d901      	bls.n	8000de0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	e1a1      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000de0:	4b2d      	ldr	r3, [pc, #180]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f003 0302 	and.w	r3, r3, #2
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d0f0      	beq.n	8000dce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dec:	4b2a      	ldr	r3, [pc, #168]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	695b      	ldr	r3, [r3, #20]
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	4927      	ldr	r1, [pc, #156]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	600b      	str	r3, [r1, #0]
 8000e00:	e015      	b.n	8000e2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e02:	4b26      	ldr	r3, [pc, #152]	@ (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e08:	f7ff fc60 	bl	80006cc <HAL_GetTick>
 8000e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e0e:	e008      	b.n	8000e22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e10:	f7ff fc5c 	bl	80006cc <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d901      	bls.n	8000e22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	e180      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e22:	4b1d      	ldr	r3, [pc, #116]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d1f0      	bne.n	8000e10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 0308 	and.w	r3, r3, #8
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d03a      	beq.n	8000eb0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d019      	beq.n	8000e76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e42:	4b17      	ldr	r3, [pc, #92]	@ (8000ea0 <HAL_RCC_OscConfig+0x274>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e48:	f7ff fc40 	bl	80006cc <HAL_GetTick>
 8000e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e4e:	e008      	b.n	8000e62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e50:	f7ff fc3c 	bl	80006cc <HAL_GetTick>
 8000e54:	4602      	mov	r2, r0
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d901      	bls.n	8000e62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	e160      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e62:	4b0d      	ldr	r3, [pc, #52]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d0f0      	beq.n	8000e50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e6e:	2001      	movs	r0, #1
 8000e70:	f000 fabc 	bl	80013ec <RCC_Delay>
 8000e74:	e01c      	b.n	8000eb0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea0 <HAL_RCC_OscConfig+0x274>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e7c:	f7ff fc26 	bl	80006cc <HAL_GetTick>
 8000e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e82:	e00f      	b.n	8000ea4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e84:	f7ff fc22 	bl	80006cc <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d908      	bls.n	8000ea4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e92:	2303      	movs	r3, #3
 8000e94:	e146      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>
 8000e96:	bf00      	nop
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	42420000 	.word	0x42420000
 8000ea0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ea4:	4b92      	ldr	r3, [pc, #584]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ea8:	f003 0302 	and.w	r3, r3, #2
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d1e9      	bne.n	8000e84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f003 0304 	and.w	r3, r3, #4
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	f000 80a6 	beq.w	800100a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ec2:	4b8b      	ldr	r3, [pc, #556]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000ec4:	69db      	ldr	r3, [r3, #28]
 8000ec6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d10d      	bne.n	8000eea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ece:	4b88      	ldr	r3, [pc, #544]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	4a87      	ldr	r2, [pc, #540]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000ed4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ed8:	61d3      	str	r3, [r2, #28]
 8000eda:	4b85      	ldr	r3, [pc, #532]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eea:	4b82      	ldr	r3, [pc, #520]	@ (80010f4 <HAL_RCC_OscConfig+0x4c8>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d118      	bne.n	8000f28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ef6:	4b7f      	ldr	r3, [pc, #508]	@ (80010f4 <HAL_RCC_OscConfig+0x4c8>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a7e      	ldr	r2, [pc, #504]	@ (80010f4 <HAL_RCC_OscConfig+0x4c8>)
 8000efc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f02:	f7ff fbe3 	bl	80006cc <HAL_GetTick>
 8000f06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f08:	e008      	b.n	8000f1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f0a:	f7ff fbdf 	bl	80006cc <HAL_GetTick>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	2b64      	cmp	r3, #100	@ 0x64
 8000f16:	d901      	bls.n	8000f1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	e103      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f1c:	4b75      	ldr	r3, [pc, #468]	@ (80010f4 <HAL_RCC_OscConfig+0x4c8>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d0f0      	beq.n	8000f0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d106      	bne.n	8000f3e <HAL_RCC_OscConfig+0x312>
 8000f30:	4b6f      	ldr	r3, [pc, #444]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000f32:	6a1b      	ldr	r3, [r3, #32]
 8000f34:	4a6e      	ldr	r2, [pc, #440]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000f36:	f043 0301 	orr.w	r3, r3, #1
 8000f3a:	6213      	str	r3, [r2, #32]
 8000f3c:	e02d      	b.n	8000f9a <HAL_RCC_OscConfig+0x36e>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	68db      	ldr	r3, [r3, #12]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d10c      	bne.n	8000f60 <HAL_RCC_OscConfig+0x334>
 8000f46:	4b6a      	ldr	r3, [pc, #424]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000f48:	6a1b      	ldr	r3, [r3, #32]
 8000f4a:	4a69      	ldr	r2, [pc, #420]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000f4c:	f023 0301 	bic.w	r3, r3, #1
 8000f50:	6213      	str	r3, [r2, #32]
 8000f52:	4b67      	ldr	r3, [pc, #412]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000f54:	6a1b      	ldr	r3, [r3, #32]
 8000f56:	4a66      	ldr	r2, [pc, #408]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000f58:	f023 0304 	bic.w	r3, r3, #4
 8000f5c:	6213      	str	r3, [r2, #32]
 8000f5e:	e01c      	b.n	8000f9a <HAL_RCC_OscConfig+0x36e>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	2b05      	cmp	r3, #5
 8000f66:	d10c      	bne.n	8000f82 <HAL_RCC_OscConfig+0x356>
 8000f68:	4b61      	ldr	r3, [pc, #388]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000f6a:	6a1b      	ldr	r3, [r3, #32]
 8000f6c:	4a60      	ldr	r2, [pc, #384]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000f6e:	f043 0304 	orr.w	r3, r3, #4
 8000f72:	6213      	str	r3, [r2, #32]
 8000f74:	4b5e      	ldr	r3, [pc, #376]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000f76:	6a1b      	ldr	r3, [r3, #32]
 8000f78:	4a5d      	ldr	r2, [pc, #372]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000f7a:	f043 0301 	orr.w	r3, r3, #1
 8000f7e:	6213      	str	r3, [r2, #32]
 8000f80:	e00b      	b.n	8000f9a <HAL_RCC_OscConfig+0x36e>
 8000f82:	4b5b      	ldr	r3, [pc, #364]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000f84:	6a1b      	ldr	r3, [r3, #32]
 8000f86:	4a5a      	ldr	r2, [pc, #360]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000f88:	f023 0301 	bic.w	r3, r3, #1
 8000f8c:	6213      	str	r3, [r2, #32]
 8000f8e:	4b58      	ldr	r3, [pc, #352]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000f90:	6a1b      	ldr	r3, [r3, #32]
 8000f92:	4a57      	ldr	r2, [pc, #348]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000f94:	f023 0304 	bic.w	r3, r3, #4
 8000f98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d015      	beq.n	8000fce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fa2:	f7ff fb93 	bl	80006cc <HAL_GetTick>
 8000fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fa8:	e00a      	b.n	8000fc0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000faa:	f7ff fb8f 	bl	80006cc <HAL_GetTick>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d901      	bls.n	8000fc0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	e0b1      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fc0:	4b4b      	ldr	r3, [pc, #300]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000fc2:	6a1b      	ldr	r3, [r3, #32]
 8000fc4:	f003 0302 	and.w	r3, r3, #2
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d0ee      	beq.n	8000faa <HAL_RCC_OscConfig+0x37e>
 8000fcc:	e014      	b.n	8000ff8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fce:	f7ff fb7d 	bl	80006cc <HAL_GetTick>
 8000fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fd4:	e00a      	b.n	8000fec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fd6:	f7ff fb79 	bl	80006cc <HAL_GetTick>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d901      	bls.n	8000fec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e09b      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fec:	4b40      	ldr	r3, [pc, #256]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000fee:	6a1b      	ldr	r3, [r3, #32]
 8000ff0:	f003 0302 	and.w	r3, r3, #2
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d1ee      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000ff8:	7dfb      	ldrb	r3, [r7, #23]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d105      	bne.n	800100a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ffe:	4b3c      	ldr	r3, [pc, #240]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	4a3b      	ldr	r2, [pc, #236]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8001004:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001008:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	2b00      	cmp	r3, #0
 8001010:	f000 8087 	beq.w	8001122 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001014:	4b36      	ldr	r3, [pc, #216]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 030c 	and.w	r3, r3, #12
 800101c:	2b08      	cmp	r3, #8
 800101e:	d061      	beq.n	80010e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	69db      	ldr	r3, [r3, #28]
 8001024:	2b02      	cmp	r3, #2
 8001026:	d146      	bne.n	80010b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001028:	4b33      	ldr	r3, [pc, #204]	@ (80010f8 <HAL_RCC_OscConfig+0x4cc>)
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800102e:	f7ff fb4d 	bl	80006cc <HAL_GetTick>
 8001032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001034:	e008      	b.n	8001048 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001036:	f7ff fb49 	bl	80006cc <HAL_GetTick>
 800103a:	4602      	mov	r2, r0
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	2b02      	cmp	r3, #2
 8001042:	d901      	bls.n	8001048 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001044:	2303      	movs	r3, #3
 8001046:	e06d      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001048:	4b29      	ldr	r3, [pc, #164]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d1f0      	bne.n	8001036 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6a1b      	ldr	r3, [r3, #32]
 8001058:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800105c:	d108      	bne.n	8001070 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800105e:	4b24      	ldr	r3, [pc, #144]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	4921      	ldr	r1, [pc, #132]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 800106c:	4313      	orrs	r3, r2
 800106e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001070:	4b1f      	ldr	r3, [pc, #124]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6a19      	ldr	r1, [r3, #32]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001080:	430b      	orrs	r3, r1
 8001082:	491b      	ldr	r1, [pc, #108]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8001084:	4313      	orrs	r3, r2
 8001086:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001088:	4b1b      	ldr	r3, [pc, #108]	@ (80010f8 <HAL_RCC_OscConfig+0x4cc>)
 800108a:	2201      	movs	r2, #1
 800108c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800108e:	f7ff fb1d 	bl	80006cc <HAL_GetTick>
 8001092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001094:	e008      	b.n	80010a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001096:	f7ff fb19 	bl	80006cc <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d901      	bls.n	80010a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e03d      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010a8:	4b11      	ldr	r3, [pc, #68]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d0f0      	beq.n	8001096 <HAL_RCC_OscConfig+0x46a>
 80010b4:	e035      	b.n	8001122 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010b6:	4b10      	ldr	r3, [pc, #64]	@ (80010f8 <HAL_RCC_OscConfig+0x4cc>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010bc:	f7ff fb06 	bl	80006cc <HAL_GetTick>
 80010c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010c2:	e008      	b.n	80010d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010c4:	f7ff fb02 	bl	80006cc <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d901      	bls.n	80010d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e026      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010d6:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1f0      	bne.n	80010c4 <HAL_RCC_OscConfig+0x498>
 80010e2:	e01e      	b.n	8001122 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	69db      	ldr	r3, [r3, #28]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d107      	bne.n	80010fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e019      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>
 80010f0:	40021000 	.word	0x40021000
 80010f4:	40007000 	.word	0x40007000
 80010f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80010fc:	4b0b      	ldr	r3, [pc, #44]	@ (800112c <HAL_RCC_OscConfig+0x500>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6a1b      	ldr	r3, [r3, #32]
 800110c:	429a      	cmp	r2, r3
 800110e:	d106      	bne.n	800111e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800111a:	429a      	cmp	r2, r3
 800111c:	d001      	beq.n	8001122 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e000      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001122:	2300      	movs	r3, #0
}
 8001124:	4618      	mov	r0, r3
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40021000 	.word	0x40021000

08001130 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d101      	bne.n	8001144 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e0d0      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001144:	4b6a      	ldr	r3, [pc, #424]	@ (80012f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0307 	and.w	r3, r3, #7
 800114c:	683a      	ldr	r2, [r7, #0]
 800114e:	429a      	cmp	r2, r3
 8001150:	d910      	bls.n	8001174 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001152:	4b67      	ldr	r3, [pc, #412]	@ (80012f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f023 0207 	bic.w	r2, r3, #7
 800115a:	4965      	ldr	r1, [pc, #404]	@ (80012f0 <HAL_RCC_ClockConfig+0x1c0>)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	4313      	orrs	r3, r2
 8001160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001162:	4b63      	ldr	r3, [pc, #396]	@ (80012f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	683a      	ldr	r2, [r7, #0]
 800116c:	429a      	cmp	r2, r3
 800116e:	d001      	beq.n	8001174 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e0b8      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d020      	beq.n	80011c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0304 	and.w	r3, r3, #4
 8001188:	2b00      	cmp	r3, #0
 800118a:	d005      	beq.n	8001198 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800118c:	4b59      	ldr	r3, [pc, #356]	@ (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	4a58      	ldr	r2, [pc, #352]	@ (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001192:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001196:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0308 	and.w	r3, r3, #8
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d005      	beq.n	80011b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011a4:	4b53      	ldr	r3, [pc, #332]	@ (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	4a52      	ldr	r2, [pc, #328]	@ (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 80011aa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80011ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011b0:	4b50      	ldr	r3, [pc, #320]	@ (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	494d      	ldr	r1, [pc, #308]	@ (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 80011be:	4313      	orrs	r3, r2
 80011c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d040      	beq.n	8001250 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d107      	bne.n	80011e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d6:	4b47      	ldr	r3, [pc, #284]	@ (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d115      	bne.n	800120e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e07f      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d107      	bne.n	80011fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011ee:	4b41      	ldr	r3, [pc, #260]	@ (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d109      	bne.n	800120e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e073      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011fe:	4b3d      	ldr	r3, [pc, #244]	@ (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e06b      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800120e:	4b39      	ldr	r3, [pc, #228]	@ (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f023 0203 	bic.w	r2, r3, #3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	4936      	ldr	r1, [pc, #216]	@ (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 800121c:	4313      	orrs	r3, r2
 800121e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001220:	f7ff fa54 	bl	80006cc <HAL_GetTick>
 8001224:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001226:	e00a      	b.n	800123e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001228:	f7ff fa50 	bl	80006cc <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001236:	4293      	cmp	r3, r2
 8001238:	d901      	bls.n	800123e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e053      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800123e:	4b2d      	ldr	r3, [pc, #180]	@ (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f003 020c 	and.w	r2, r3, #12
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	429a      	cmp	r2, r3
 800124e:	d1eb      	bne.n	8001228 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001250:	4b27      	ldr	r3, [pc, #156]	@ (80012f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0307 	and.w	r3, r3, #7
 8001258:	683a      	ldr	r2, [r7, #0]
 800125a:	429a      	cmp	r2, r3
 800125c:	d210      	bcs.n	8001280 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800125e:	4b24      	ldr	r3, [pc, #144]	@ (80012f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f023 0207 	bic.w	r2, r3, #7
 8001266:	4922      	ldr	r1, [pc, #136]	@ (80012f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	4313      	orrs	r3, r2
 800126c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800126e:	4b20      	ldr	r3, [pc, #128]	@ (80012f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	683a      	ldr	r2, [r7, #0]
 8001278:	429a      	cmp	r2, r3
 800127a:	d001      	beq.n	8001280 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e032      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0304 	and.w	r3, r3, #4
 8001288:	2b00      	cmp	r3, #0
 800128a:	d008      	beq.n	800129e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800128c:	4b19      	ldr	r3, [pc, #100]	@ (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	4916      	ldr	r1, [pc, #88]	@ (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 800129a:	4313      	orrs	r3, r2
 800129c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0308 	and.w	r3, r3, #8
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d009      	beq.n	80012be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012aa:	4b12      	ldr	r3, [pc, #72]	@ (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	490e      	ldr	r1, [pc, #56]	@ (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 80012ba:	4313      	orrs	r3, r2
 80012bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012be:	f000 f82d 	bl	800131c <HAL_RCC_GetSysClockFreq>
 80012c2:	4602      	mov	r2, r0
 80012c4:	4b0b      	ldr	r3, [pc, #44]	@ (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	091b      	lsrs	r3, r3, #4
 80012ca:	f003 030f 	and.w	r3, r3, #15
 80012ce:	490a      	ldr	r1, [pc, #40]	@ (80012f8 <HAL_RCC_ClockConfig+0x1c8>)
 80012d0:	5ccb      	ldrb	r3, [r1, r3]
 80012d2:	fa22 f303 	lsr.w	r3, r2, r3
 80012d6:	4a09      	ldr	r2, [pc, #36]	@ (80012fc <HAL_RCC_ClockConfig+0x1cc>)
 80012d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80012da:	4b09      	ldr	r3, [pc, #36]	@ (8001300 <HAL_RCC_ClockConfig+0x1d0>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff f9b2 	bl	8000648 <HAL_InitTick>

  return HAL_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40022000 	.word	0x40022000
 80012f4:	40021000 	.word	0x40021000
 80012f8:	080018e4 	.word	0x080018e4
 80012fc:	20000000 	.word	0x20000000
 8001300:	20000004 	.word	0x20000004

08001304 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8001308:	4b03      	ldr	r3, [pc, #12]	@ (8001318 <HAL_RCC_EnableCSS+0x14>)
 800130a:	2201      	movs	r2, #1
 800130c:	601a      	str	r2, [r3, #0]
}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	4242004c 	.word	0x4242004c

0800131c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800131c:	b480      	push	{r7}
 800131e:	b087      	sub	sp, #28
 8001320:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	2300      	movs	r3, #0
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
 800132e:	2300      	movs	r3, #0
 8001330:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001336:	4b1e      	ldr	r3, [pc, #120]	@ (80013b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f003 030c 	and.w	r3, r3, #12
 8001342:	2b04      	cmp	r3, #4
 8001344:	d002      	beq.n	800134c <HAL_RCC_GetSysClockFreq+0x30>
 8001346:	2b08      	cmp	r3, #8
 8001348:	d003      	beq.n	8001352 <HAL_RCC_GetSysClockFreq+0x36>
 800134a:	e027      	b.n	800139c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800134c:	4b19      	ldr	r3, [pc, #100]	@ (80013b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800134e:	613b      	str	r3, [r7, #16]
      break;
 8001350:	e027      	b.n	80013a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	0c9b      	lsrs	r3, r3, #18
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	4a17      	ldr	r2, [pc, #92]	@ (80013b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800135c:	5cd3      	ldrb	r3, [r2, r3]
 800135e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d010      	beq.n	800138c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800136a:	4b11      	ldr	r3, [pc, #68]	@ (80013b0 <HAL_RCC_GetSysClockFreq+0x94>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	0c5b      	lsrs	r3, r3, #17
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	4a11      	ldr	r2, [pc, #68]	@ (80013bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001376:	5cd3      	ldrb	r3, [r2, r3]
 8001378:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a0d      	ldr	r2, [pc, #52]	@ (80013b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800137e:	fb03 f202 	mul.w	r2, r3, r2
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	fbb2 f3f3 	udiv	r3, r2, r3
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	e004      	b.n	8001396 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4a0c      	ldr	r2, [pc, #48]	@ (80013c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001390:	fb02 f303 	mul.w	r3, r2, r3
 8001394:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	613b      	str	r3, [r7, #16]
      break;
 800139a:	e002      	b.n	80013a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800139c:	4b05      	ldr	r3, [pc, #20]	@ (80013b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800139e:	613b      	str	r3, [r7, #16]
      break;
 80013a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013a2:	693b      	ldr	r3, [r7, #16]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	371c      	adds	r7, #28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	40021000 	.word	0x40021000
 80013b4:	007a1200 	.word	0x007a1200
 80013b8:	080018f4 	.word	0x080018f4
 80013bc:	08001904 	.word	0x08001904
 80013c0:	003d0900 	.word	0x003d0900

080013c4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80013c8:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <HAL_RCC_NMI_IRQHandler+0x20>)
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013d0:	2b80      	cmp	r3, #128	@ 0x80
 80013d2:	d104      	bne.n	80013de <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80013d4:	f000 f828 	bl	8001428 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80013d8:	4b03      	ldr	r3, [pc, #12]	@ (80013e8 <HAL_RCC_NMI_IRQHandler+0x24>)
 80013da:	2280      	movs	r2, #128	@ 0x80
 80013dc:	701a      	strb	r2, [r3, #0]
  }
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40021000 	.word	0x40021000
 80013e8:	4002100a 	.word	0x4002100a

080013ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001420 <RCC_Delay+0x34>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001424 <RCC_Delay+0x38>)
 80013fa:	fba2 2303 	umull	r2, r3, r2, r3
 80013fe:	0a5b      	lsrs	r3, r3, #9
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	fb02 f303 	mul.w	r3, r2, r3
 8001406:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001408:	bf00      	nop
  }
  while (Delay --);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	1e5a      	subs	r2, r3, #1
 800140e:	60fa      	str	r2, [r7, #12]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d1f9      	bne.n	8001408 <RCC_Delay+0x1c>
}
 8001414:	bf00      	nop
 8001416:	bf00      	nop
 8001418:	3714      	adds	r7, #20
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr
 8001420:	20000000 	.word	0x20000000
 8001424:	10624dd3 	.word	0x10624dd3

08001428 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr

08001434 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d101      	bne.n	8001448 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e093      	b.n	8001570 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2b00      	cmp	r3, #0
 8001452:	d106      	bne.n	8001462 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff f843 	bl	80004e8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2202      	movs	r2, #2
 8001466:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	6812      	ldr	r2, [r2, #0]
 8001474:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001478:	f023 0307 	bic.w	r3, r3, #7
 800147c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	3304      	adds	r3, #4
 8001486:	4619      	mov	r1, r3
 8001488:	4610      	mov	r0, r2
 800148a:	f000 f903 	bl	8001694 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	6a1b      	ldr	r3, [r3, #32]
 80014a4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	697a      	ldr	r2, [r7, #20]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80014b6:	f023 0303 	bic.w	r3, r3, #3
 80014ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	021b      	lsls	r3, r3, #8
 80014c6:	4313      	orrs	r3, r2
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80014d4:	f023 030c 	bic.w	r3, r3, #12
 80014d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80014e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80014e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	68da      	ldr	r2, [r3, #12]
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	021b      	lsls	r3, r3, #8
 80014f0:	4313      	orrs	r3, r2
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	691b      	ldr	r3, [r3, #16]
 80014fc:	011a      	lsls	r2, r3, #4
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	6a1b      	ldr	r3, [r3, #32]
 8001502:	031b      	lsls	r3, r3, #12
 8001504:	4313      	orrs	r3, r2
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4313      	orrs	r3, r2
 800150a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8001512:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	695b      	ldr	r3, [r3, #20]
 800151c:	011b      	lsls	r3, r3, #4
 800151e:	4313      	orrs	r3, r2
 8001520:	68fa      	ldr	r2, [r7, #12]
 8001522:	4313      	orrs	r3, r2
 8001524:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	697a      	ldr	r2, [r7, #20]
 800152c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2201      	movs	r2, #1
 8001542:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2201      	movs	r2, #1
 800154a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2201      	movs	r2, #1
 8001552:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2201      	movs	r2, #1
 800155a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2201      	movs	r2, #1
 8001562:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2201      	movs	r2, #1
 800156a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001588:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001590:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001598:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80015a0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d110      	bne.n	80015ca <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d102      	bne.n	80015b4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80015ae:	7b7b      	ldrb	r3, [r7, #13]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d001      	beq.n	80015b8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e069      	b.n	800168c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2202      	movs	r2, #2
 80015bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2202      	movs	r2, #2
 80015c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80015c8:	e031      	b.n	800162e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	2b04      	cmp	r3, #4
 80015ce:	d110      	bne.n	80015f2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80015d0:	7bbb      	ldrb	r3, [r7, #14]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d102      	bne.n	80015dc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80015d6:	7b3b      	ldrb	r3, [r7, #12]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d001      	beq.n	80015e0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e055      	b.n	800168c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2202      	movs	r2, #2
 80015e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2202      	movs	r2, #2
 80015ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80015f0:	e01d      	b.n	800162e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d108      	bne.n	800160a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80015f8:	7bbb      	ldrb	r3, [r7, #14]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d105      	bne.n	800160a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80015fe:	7b7b      	ldrb	r3, [r7, #13]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d102      	bne.n	800160a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001604:	7b3b      	ldrb	r3, [r7, #12]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d001      	beq.n	800160e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e03e      	b.n	800168c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2202      	movs	r2, #2
 8001612:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2202      	movs	r2, #2
 800161a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2202      	movs	r2, #2
 8001622:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2202      	movs	r2, #2
 800162a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d003      	beq.n	800163c <HAL_TIM_Encoder_Start+0xc4>
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	2b04      	cmp	r3, #4
 8001638:	d008      	beq.n	800164c <HAL_TIM_Encoder_Start+0xd4>
 800163a:	e00f      	b.n	800165c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2201      	movs	r2, #1
 8001642:	2100      	movs	r1, #0
 8001644:	4618      	mov	r0, r3
 8001646:	f000 f893 	bl	8001770 <TIM_CCxChannelCmd>
      break;
 800164a:	e016      	b.n	800167a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2201      	movs	r2, #1
 8001652:	2104      	movs	r1, #4
 8001654:	4618      	mov	r0, r3
 8001656:	f000 f88b 	bl	8001770 <TIM_CCxChannelCmd>
      break;
 800165a:	e00e      	b.n	800167a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2201      	movs	r2, #1
 8001662:	2100      	movs	r1, #0
 8001664:	4618      	mov	r0, r3
 8001666:	f000 f883 	bl	8001770 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2201      	movs	r2, #1
 8001670:	2104      	movs	r1, #4
 8001672:	4618      	mov	r0, r3
 8001674:	f000 f87c 	bl	8001770 <TIM_CCxChannelCmd>
      break;
 8001678:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f042 0201 	orr.w	r2, r2, #1
 8001688:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800168a:	2300      	movs	r3, #0
}
 800168c:	4618      	mov	r0, r3
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a2f      	ldr	r2, [pc, #188]	@ (8001764 <TIM_Base_SetConfig+0xd0>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d00b      	beq.n	80016c4 <TIM_Base_SetConfig+0x30>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016b2:	d007      	beq.n	80016c4 <TIM_Base_SetConfig+0x30>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a2c      	ldr	r2, [pc, #176]	@ (8001768 <TIM_Base_SetConfig+0xd4>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d003      	beq.n	80016c4 <TIM_Base_SetConfig+0x30>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4a2b      	ldr	r2, [pc, #172]	@ (800176c <TIM_Base_SetConfig+0xd8>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d108      	bne.n	80016d6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80016ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	68fa      	ldr	r2, [r7, #12]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a22      	ldr	r2, [pc, #136]	@ (8001764 <TIM_Base_SetConfig+0xd0>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d00b      	beq.n	80016f6 <TIM_Base_SetConfig+0x62>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016e4:	d007      	beq.n	80016f6 <TIM_Base_SetConfig+0x62>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a1f      	ldr	r2, [pc, #124]	@ (8001768 <TIM_Base_SetConfig+0xd4>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d003      	beq.n	80016f6 <TIM_Base_SetConfig+0x62>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a1e      	ldr	r2, [pc, #120]	@ (800176c <TIM_Base_SetConfig+0xd8>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d108      	bne.n	8001708 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80016fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	4313      	orrs	r3, r2
 8001706:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	4313      	orrs	r3, r2
 8001714:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	68fa      	ldr	r2, [r7, #12]
 800171a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4a0d      	ldr	r2, [pc, #52]	@ (8001764 <TIM_Base_SetConfig+0xd0>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d103      	bne.n	800173c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	691a      	ldr	r2, [r3, #16]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2201      	movs	r2, #1
 8001740:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	2b00      	cmp	r3, #0
 800174c:	d005      	beq.n	800175a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	f023 0201 	bic.w	r2, r3, #1
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	611a      	str	r2, [r3, #16]
  }
}
 800175a:	bf00      	nop
 800175c:	3714      	adds	r7, #20
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr
 8001764:	40012c00 	.word	0x40012c00
 8001768:	40000400 	.word	0x40000400
 800176c:	40000800 	.word	0x40000800

08001770 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001770:	b480      	push	{r7}
 8001772:	b087      	sub	sp, #28
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	f003 031f 	and.w	r3, r3, #31
 8001782:	2201      	movs	r2, #1
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6a1a      	ldr	r2, [r3, #32]
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	43db      	mvns	r3, r3
 8001792:	401a      	ands	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6a1a      	ldr	r2, [r3, #32]
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	f003 031f 	and.w	r3, r3, #31
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	fa01 f303 	lsl.w	r3, r1, r3
 80017a8:	431a      	orrs	r2, r3
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	621a      	str	r2, [r3, #32]
}
 80017ae:	bf00      	nop
 80017b0:	371c      	adds	r7, #28
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr

080017b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d101      	bne.n	80017d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80017cc:	2302      	movs	r3, #2
 80017ce:	e046      	b.n	800185e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2202      	movs	r2, #2
 80017dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80017f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	4313      	orrs	r3, r2
 8001800:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a16      	ldr	r2, [pc, #88]	@ (8001868 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d00e      	beq.n	8001832 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800181c:	d009      	beq.n	8001832 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a12      	ldr	r2, [pc, #72]	@ (800186c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d004      	beq.n	8001832 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a10      	ldr	r2, [pc, #64]	@ (8001870 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d10c      	bne.n	800184c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001838:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	68ba      	ldr	r2, [r7, #8]
 8001840:	4313      	orrs	r3, r2
 8001842:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	68ba      	ldr	r2, [r7, #8]
 800184a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2201      	movs	r2, #1
 8001850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr
 8001868:	40012c00 	.word	0x40012c00
 800186c:	40000400 	.word	0x40000400
 8001870:	40000800 	.word	0x40000800

08001874 <memset>:
 8001874:	4603      	mov	r3, r0
 8001876:	4402      	add	r2, r0
 8001878:	4293      	cmp	r3, r2
 800187a:	d100      	bne.n	800187e <memset+0xa>
 800187c:	4770      	bx	lr
 800187e:	f803 1b01 	strb.w	r1, [r3], #1
 8001882:	e7f9      	b.n	8001878 <memset+0x4>

08001884 <__libc_init_array>:
 8001884:	b570      	push	{r4, r5, r6, lr}
 8001886:	2600      	movs	r6, #0
 8001888:	4d0c      	ldr	r5, [pc, #48]	@ (80018bc <__libc_init_array+0x38>)
 800188a:	4c0d      	ldr	r4, [pc, #52]	@ (80018c0 <__libc_init_array+0x3c>)
 800188c:	1b64      	subs	r4, r4, r5
 800188e:	10a4      	asrs	r4, r4, #2
 8001890:	42a6      	cmp	r6, r4
 8001892:	d109      	bne.n	80018a8 <__libc_init_array+0x24>
 8001894:	f000 f81a 	bl	80018cc <_init>
 8001898:	2600      	movs	r6, #0
 800189a:	4d0a      	ldr	r5, [pc, #40]	@ (80018c4 <__libc_init_array+0x40>)
 800189c:	4c0a      	ldr	r4, [pc, #40]	@ (80018c8 <__libc_init_array+0x44>)
 800189e:	1b64      	subs	r4, r4, r5
 80018a0:	10a4      	asrs	r4, r4, #2
 80018a2:	42a6      	cmp	r6, r4
 80018a4:	d105      	bne.n	80018b2 <__libc_init_array+0x2e>
 80018a6:	bd70      	pop	{r4, r5, r6, pc}
 80018a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80018ac:	4798      	blx	r3
 80018ae:	3601      	adds	r6, #1
 80018b0:	e7ee      	b.n	8001890 <__libc_init_array+0xc>
 80018b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80018b6:	4798      	blx	r3
 80018b8:	3601      	adds	r6, #1
 80018ba:	e7f2      	b.n	80018a2 <__libc_init_array+0x1e>
 80018bc:	08001908 	.word	0x08001908
 80018c0:	08001908 	.word	0x08001908
 80018c4:	08001908 	.word	0x08001908
 80018c8:	0800190c 	.word	0x0800190c

080018cc <_init>:
 80018cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018ce:	bf00      	nop
 80018d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018d2:	bc08      	pop	{r3}
 80018d4:	469e      	mov	lr, r3
 80018d6:	4770      	bx	lr

080018d8 <_fini>:
 80018d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018da:	bf00      	nop
 80018dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018de:	bc08      	pop	{r3}
 80018e0:	469e      	mov	lr, r3
 80018e2:	4770      	bx	lr
